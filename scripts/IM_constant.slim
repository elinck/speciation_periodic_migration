

// set up simulation parameters
initialize() {

	defineConstant('simID',format("%.0f",runif(1,1e6,1e7-1)));
	defineConstant('L',1e6);
	
	//simulation parameters
	//initializeTreeSeq();
	initializeMutationRate(1e-8); //faster to put down mutations on treeseqs with msprime if neutral, switch to 0 for parallel runs
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L);
	initializeRecombinationRate(1e-8);
}

// create 2 populations of 10,000 individuals 
1 {
	sim.addSubpop("p1",10000);
	sim.addSubpop("p2", 10000);
	p1.setMigrationRates(p2,0);
	p2.setMigrationRates(p1,0);
	//print("and we're off");
	//writeFile("/home/cbattey2/speciation_cyclical_migration/simulations/slim/constant/sim_"+simID+"_stats_by_gen.txt",
	// 	    	 "generation Fst pi1 pi2 Dxy");
}

// migration rate producing equilibrium Fst=0.06166515
10000 early() {
		p1.setMigrationRates(p2,4.755192e-05);
		p2.setMigrationRates(p1,4.755192e-05); //ie m=((1/Fst)-1)/(4N+(2/(2-1))^2) via Wang 2004
}

// output final tree sequence
late() {
	if(sim.generation % 1e3 == 0){
		//Fst
		p1_p = sim.mutationFrequencies(p1);
		p2_p = sim.mutationFrequencies(p2);
		mean_p = (p1_p + p2_p) / 2.0;
		H_t = 2.0 * mean_p * (1.0 - mean_p);
		H_s = p1_p * (1.0 - p1_p) + p2_p * (1.0 - p2_p);
		fst = 1.0 - H_s/H_t;
		fst=mean(fst);
		
		//pi1
		pi1=c();
		for(i in 1:100){
			p1ind=sample(p1.individuals,2);
			pairdists=c();
			for(j in 0:1){
				for(k in 0:1){
					muts1=p1ind[0].genomes[j].mutations;
					muts2=p1ind[1].genomes[k].mutations;
					unshared=setSymmetricDifference(muts1,muts2);
					dist=size(unshared)/L;
					pairdists=c(pairdists,dist);
				}
			}
			pi1=c(pi1,pairdists);
		}
		pi1=mean(pi1);
		
		//pi2
		pi2=c();
		for(i in 1:100){
			p2ind=sample(p2.individuals,2);
			pairdists=c();
			for(j in 0:1){
				for(k in 0:1){
					muts1=p1ind[0].genomes[j].mutations;
					muts2=p1ind[1].genomes[k].mutations;
					unshared=setSymmetricDifference(muts1,muts2);
					dist=size(unshared)/L;
					pairdists=c(pairdists,dist);
				}
			}
			pi2=c(pi2,pairdists);
		}
		pi2=mean(pi2);
		
		//Dxy
		dxy=c();
		for(i in 1:100){
			p1ind=sample(p1.individuals,1);
			p2ind=sample(p2.individuals,1);
			pairdists=c();
			for(j in 0:1){
				for(k in 0:1){
					muts1=p1ind.genomes[j].mutations;
					muts2=p2ind.genomes[k].mutations;
					unshared=setSymmetricDifference(muts1,muts2);
					dist=size(unshared)/L;
					pairdists=c(pairdists,dist);
				}
			}
			dxy=c(dxy,pairdists);
		}
		dxy=mean(dxy);
		
		//writeFile("/home/cbattey2/speciation_cyclical_migration/simulations/slim/constant/sim_"+simID+"_stats_by_gen.txt",
	 	//    		 sim.generation+" "+fst+" "+pi1+" "+pi2+" "+dxy,append=T);
		print(sim.generation+" "+fst+" "+pi1+" "+pi2+" "+dxy);
	}
}

517160{ 
	//outname="/home/cbattey2/speciation_cyclical_migration/simulations/neutral/periodic_migration/IMflux_"+format("%.0f",runif(1,1e6,1e7-1))+".trees";
	//sim.treeSeqOutput(outname);
	sim.simulationFinished();
}
